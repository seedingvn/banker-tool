"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import {
  Calculator,
  Download,
  FileSpreadsheet,
  ImageIcon,
  Building2,
  Sparkles,
  Banknote,
  Percent,
  Calendar,
  User,
  DollarSign,
  LinkIcon,
  Clock,
  Phone,
  Mail,
  PiggyBank,
  CreditCard,
  Home,
  UserCheck,
  Menu,
  X,
  CheckCircle,
  TrendingUp,
  Shield,
  HelpCircle,
  Target,
  Settings,
  CheckIcon,
} from "lucide-react"
import { BackgroundBeamsWithCollision } from "@/components/ui/background-beams-with-collision"
import html2canvas from "html2canvas"
import * as XLSX from "xlsx"
import { toPng } from 'html-to-image';
import { ExportableResult } from '@/components/ui/ExportableResult';
import Image from 'next/image';
import { useRouter, useSearchParams } from "next/navigation";

interface LoanCalculation {
  monthlyPayment: number
  totalInterest: number
  totalPayment: number
  schedule: {
    month: number
    principal: number
    interest: number
    balance: number
    monthlyPayment: number
    startingBalance: number
  }[]
}

const bankLogos = {
  Vietcombank: "üè¶",
  BIDV: "üèõÔ∏è",
  Techcombank: "üè¢",
}

// ƒê·ªãnh nghƒ©a cho window.dataLayer ƒë·ªÉ tr√°nh l·ªói TS
declare global {
  interface Window {
    dataLayer: any[];
  }
}

export default function BankLoanCalculator() {
  const [loanAmount, setLoanAmount] = useState("")
  const [interestRate, setInterestRate] = useState("")
  const [loanTerm, setLoanTerm] = useState("")
  const [loanType, setLoanType] = useState("")
  const [bank, setBank] = useState("")
  const [bankerName, setBankerName] = useState("")
  const [contactInfo, setContactInfo] = useState("")
  const [showResults, setShowResults] = useState(false)
  const [calculation, setCalculation] = useState<LoanCalculation | null>(null)
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const [showFullContent, setShowFullContent] = useState(false)
  const resultRef = useRef<HTMLDivElement>(null)
  const hiddenResultRef = useRef<HTMLDivElement>(null)
  const [copied, setCopied] = useState(false)
  const [month, setMonth] = useState<number | null>(null)
  const [year, setYear] = useState<number | null>(null)
  const router = useRouter();
  const searchParams = useSearchParams();

  const bankLogoMap: { [key: string]: string } = {
    'hsbc': '/logos-bank/hsbc.png',
    'vib': '/logos-bank/vib.jpg',
    'vietinbank': '/logos-bank/vietinbank.jpg',
    'acb': '/logos-bank/acb.jpeg',
    'standardchartered': '/logos-bank/standardchartered.png',
    'ocb': '/logos-bank/ocb.jpg',
    'tpbank': '/logos-bank/tpbank.jpg',
    'mbbank': '/logos-bank/mbbank.jpg',
    'vpbank': '/logos-bank/vpbank.jpg',
    'hdbank': '/logos-bank/hdbank.jpg',
    'techcombank': '/logos-bank/techcombank.jpg',
    'uob': '/logos-bank/uob.jpg',
  };

  // Map key chu·∫©n h√≥a sang t√™n ƒë·∫πp
  const bankNameMap: { [key: string]: string } = {
    acb: 'ACB',
    hdbank: 'HDBank',
    mbbank: 'MB Bank',
    ocb: 'OCB',
    tpbank: 'TPBank',
    techcombank: 'Techcombank',
    uob: 'UOB',
    vib: 'VIB',
    vietinbank: 'VietinBank',
    vpbank: 'VPBank',
    hsbc: 'HSBC',
    standardchartered: 'Standard Chartered',
  };

  // Format currency input
  const formatCurrencyInput = (value: string) => {
    const numericValue = value.replace(/[^\d]/g, "")
    if (!numericValue) return ""
    return new Intl.NumberFormat("vi-VN").format(Number(numericValue))
  }

  const handleLoanAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatCurrencyInput(e.target.value)
    setLoanAmount(formatted)
  }

  // H√†m t√≠nh to√°n nh·∫≠n parameter ƒë·∫ßu v√†o, tr·∫£ v·ªÅ calculation object
  const calculateLoanFromParams = (amount: string, rate: string, term: string, type: string) => {
    const principal = Number.parseFloat(amount.replace(/[^\d]/g, ""));
    const monthlyRate = Number.parseFloat(rate) / 100 / 12;
    const months = Number.parseInt(term);
    if (!principal || !monthlyRate || !months || !type) return null;
    const schedule: LoanCalculation["schedule"] = [];
    let totalInterest = 0;
    let balance = principal;
    if (type === "equal-payment") {
      const monthlyPayment = (principal * (monthlyRate * Math.pow(1 + monthlyRate, months))) / (Math.pow(1 + monthlyRate, months) - 1);
      for (let month = 1; month <= months; month++) {
        const startingBalance = balance;
        const interestPayment = balance * monthlyRate;
        const principalPayment = monthlyPayment - interestPayment;
        balance -= principalPayment;
        totalInterest += interestPayment;
        schedule.push({
          month,
          principal: principalPayment,
          interest: interestPayment,
          balance: Math.max(0, balance),
          monthlyPayment,
          startingBalance,
        });
      }
    } else {
      const principalPayment = principal / months;
      for (let month = 1; month <= months; month++) {
        const startingBalance = balance;
        const interestPayment = balance * monthlyRate;
        const monthlyPayment = principalPayment + interestPayment;
        balance -= principalPayment;
        totalInterest += interestPayment;
        schedule.push({
          month,
          principal: principalPayment,
          interest: interestPayment,
          balance: Math.max(0, balance),
          monthlyPayment,
          startingBalance,
        });
      }
    }
    return {
      monthlyPayment: type === "equal-payment" ? schedule[0].monthlyPayment : schedule[0].monthlyPayment,
      totalInterest,
      totalPayment: principal + totalInterest,
      schedule,
    };
  };

  // S·ª≠a useEffect ƒë·ªÉ d√πng h√†m tr√™n, setCalculation v√† showResults ƒë√∫ng gi√° tr·ªã, cu·ªôn xu·ªëng k·∫øt qu·∫£
  useEffect(() => {
    const amount = searchParams.get("amount");
    const rate = searchParams.get("rate");
    const term = searchParams.get("term");
    const type = searchParams.get("type");
    const bankParam = searchParams.get("bank");
    const banker = searchParams.get("banker");
    const contact = searchParams.get("contact");
    if (amount && rate && term && type && bankParam && banker && contact) {
      setLoanAmount(formatCurrencyInput(amount));
      setInterestRate(rate);
      setLoanTerm(term);
      setLoanType(type);
      setBank(bankParam);
      setBankerName(banker);
      setContactInfo(contact);
      // T√≠nh to√°n v√† show k·∫øt qu·∫£ lu√¥n
      const calc = calculateLoanFromParams(amount, rate, term, type);
      if (calc) {
        setCalculation(calc);
        setShowResults(true);
        setTimeout(() => {
          document.getElementById("results-section")?.scrollIntoView({ behavior: "smooth" });
        }, 300);
      }
    }
  }, [searchParams]);

  // S·ª≠a h√†m calculateLoan ƒë·ªÉ gi·ªØ v·ªã tr√≠ scroll khi c·∫≠p nh·∫≠t URL
  const calculateLoan = () => {
    const calc = calculateLoanFromParams(
      loanAmount.replace(/[^\d]/g, ""),
      interestRate,
      loanTerm,
      loanType
    );
    if (!calc) return;
    setCalculation(calc);
    setShowResults(true);
    // C·∫≠p nh·∫≠t URL parameter, gi·ªØ nguy√™n v·ªã tr√≠ scroll
    const params = new URLSearchParams({
      amount: loanAmount.replace(/[^\d]/g, ""),
      rate: interestRate,
      term: loanTerm,
      type: loanType,
      bank: bank,
      banker: bankerName,
      contact: contactInfo,
    });
    router.replace(`?${params.toString()}`, { scroll: false });
    // Scroll to results section
    setTimeout(() => {
      document.getElementById("results-section")?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount)
  }

  const handleDownloadImage = async () => {
    if (!hiddenResultRef.current) {
      alert("Kh√¥ng t√¨m th·∫•y n·ªôi dung ƒë·ªÉ t·∫£i.");
      console.error("hiddenResultRef.current is null");
      return;
    }
    try {
      const options = { quality: 1.0, pixelRatio: 2, style: { fontFamily: 'sans-serif' } };
      const dataUrl = await toPng(hiddenResultRef.current, options);
      // T·∫°o t√™n file theo rule
      const clean = (str: string) => str?.toLowerCase().replace(/[^a-z0-9]/g, "").replace(/ƒë/g, "d") || "";
      const formatMoney = (str: string) => {
        const num = parseInt(str.replace(/[^\d]/g, ""), 10);
        if (!num) return "";
        if (num >= 1000000000) return Math.round(num/1000000000) + "ty";
        if (num >= 1000000) return Math.round(num/1000000) + "tr";
        if (num >= 1000) return Math.round(num/1000) + "k";
        return num+"";
      };
      const fileName = `${clean(bankerName)}-${clean(bank)}-${loanTerm}thang-${formatMoney(loanAmount)}.png`;
      const link = document.createElement('a');
      link.download = fileName;
      link.href = dataUrl;
      link.click();
    } catch (error) {
      console.error("Oops, something went wrong when exporting image!", error);
      alert("ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.\n" + (error instanceof Error ? error.message : ''));
    }
  };

  // ƒê·∫∑t t√™n file export gi·ªëng logic file ·∫£nh
  const clean = (str: string) => str?.toLowerCase().replace(/[^a-z0-9]/g, "").replace(/ƒë/g, "d") || "";
  const formatMoney = (str: string) => {
    const num = parseInt(str.replace(/[^\d]/g, ""), 10);
    if (!num) return "";
    if (num >= 1000000000) return Math.round(num/1000000000) + "ty";
    if (num >= 1000000) return Math.round(num/1000000) + "tr";
    if (num >= 1000) return Math.round(num/1000) + "k";
    return num+"";
  };

  const handleExportSheets = () => {
    if (!calculation) return
    const wsData = [
      ["K·ª≥", "D∆∞ n·ª£ ƒë·∫ßu k·ª≥", "Tr·∫£ g·ªëc", "Tr·∫£ l√£i", "T·ªïng tr·∫£", "D∆∞ n·ª£ c√≤n l·∫°i"],
      ...calculation.schedule.map((p) => [
        p.month,
        p.startingBalance,
        p.principal,
        p.interest,
        p.monthlyPayment,
        p.balance,
      ]),
    ]
    const ws = XLSX.utils.aoa_to_sheet(wsData)
    const wb = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(wb, ws, "Lich tra no")
    // ƒê·∫∑t t√™n file theo logic gi·ªëng ·∫£nh
    const fileName = `${clean(bankerName)}-${clean(bank)}-${loanTerm}thang-${formatMoney(loanAmount)}.xlsx`;
    XLSX.writeFile(wb, fileName)
  }

  const handleCopyURL = () => {
    const params = new URLSearchParams({
      amount: loanAmount.replace(/[^\d]/g, ""),
      rate: interestRate,
      term: loanTerm,
      type: loanType,
      bank: bank,
      banker: bankerName,
      contact: contactInfo,
    });
    const url = `${window.location.origin}/cong-cu-tinh-lai-suat-vay-ngan-hang?${params.toString()}`;
    navigator.clipboard.writeText(url).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  }

  const scrollToForm = () => {
    document.getElementById("loan-form")?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    const now = new Date();
    setMonth(now.getMonth() + 1);
    setYear(now.getFullYear());
  }, []);

  // 1. B·∫£n ƒë·ªì bankLinks
  const bankLinks: Record<string, string> = {
    "Eximbank": "https://www.eximbank.com.vn/",
    "SHB": "https://www.shb.com.vn/",
    "HDBank": "https://www.hdbank.com.vn/",
    "MSB": "https://www.msb.com.vn/",
    "BVBank": "https://www.bvbank.vn/",
    "VPBank": "https://www.vpbank.com.vn/",
    "Agribank": "https://www.agribank.com.vn/",
    "BIDV": "https://www.bidv.com.vn/",
    "Vietinbank": "https://www.vietinbank.vn/",
    "VIB": "https://www.vib.com.vn/",
    "MBBank": "https://www.mbbank.com.vn/",
    "Vietcombank": "https://www.vietcombank.com.vn/",
    "Standard Chartered": "https://www.sc.com/vn/",
    "Sacombank": "https://www.sacombank.com.vn/",
    "Techcombank": "https://www.techcombank.com.vn/"
  };
  // 2. D·ªØ li·ªáu l√£i su·∫•t mapping
  const bankRates: Record<string, {rate: number, max: number, term: number}> = {
    "Eximbank": {rate: 3.68, max: 100, term: 40},
    "SHB": {rate: 3.99, max: 90, term: 25},
    "HDBank": {rate: 4.5, max: 85, term: 35},
    "MSB": {rate: 4.5, max: 90, term: 35},
    "BVBank": {rate: 5, max: 75, term: 20},
    "VPBank": {rate: 5.2, max: 75, term: 25},
    "Agribank": {rate: 5.5, max: 100, term: 30},
    "BIDV": {rate: 5.5, max: 100, term: 30},
    "Vietinbank": {rate: 5.6, max: 80, term: 20},
    "VIB": {rate: 5.9, max: 85, term: 30},
    "MBBank": {rate: 6.0, max: 80, term: 20},
    "Vietcombank": {rate: 6.2, max: 70, term: 20},
    "Standard Chartered": {rate: 6.3, max: 75, term: 25},
    "Sacombank": {rate: 6.5, max: 90, term: 35},
    "Techcombank": {rate: 6.7, max: 80, term: 35},
  };

  return (
    <div className="min-h-screen bg-white font-inter">
      {/* Hero Section */}
      <BackgroundBeamsWithCollision
        className="min-h-[40vh] md:min-h-[60vh] pt-2 md:pt-8 pb-4 md:pb-12"
      >
        <div className="max-w-6xl mx-auto text-left md:text-center px-4 relative z-20 flex flex-col min-h-full h-full justify-start md:justify-center">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="mb-6 md:mb-10"
          >
            <h1 className="mb-4 md:mb-6">
              <span className="block text-2xl md:text-5xl lg:text-6xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-[#7B61FF] via-[#7B61FF] to-[#F857A6] drop-shadow-md">
                C√¥ng C·ª• T√≠nh L√£i Su·∫•t
              </span>
              <span className="block text-xl md:text-4xl lg:text-5xl font-bold text-black mt-2">
                Vay Ng√¢n H√†ng Online Ch√≠nh X√°c
              </span>
            </h1>
            <p className="text-base md:text-lg lg:text-xl text-gray-600 mb-6 md:mb-8 max-w-3xl mx-auto md:mx-auto">
              C√¥ng c·ª• t√≠nh l√£i vay chuy√™n nghi·ªáp gi√∫p banker v√† ng∆∞·ªùi d√πng d·ªÖ d√†ng t√≠nh to√°n ti·ªÅn g·ªëc & l√£i ph·∫£i tr·∫£
              h√†ng th√°ng, l·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh hi·ªáu qu·∫£
            </p>
            <Button
              id="btn-hero-calculate"
              onClick={() => {
                window.dataLayer = window.dataLayer || [];
                window.dataLayer.push({
                  event: 'button_click',
                  button_name: 'btn-hero-calculate'
                });
                scrollToForm();
              }}
              size="lg"
              className="bg-primary-blue hover:bg-primary-blue-dark text-white px-8 md:px-10 py-3 md:py-4 text-base md:text-lg font-semibold rounded-xl shadow-lg transition-all duration-300 hover:shadow-xl"
            >
              <Sparkles className="mr-2 h-4 w-4 md:h-5 md:w-5" />
              T√≠nh L√£i Vay Ngay
            </Button>
          </motion.div>

          {/* Features Row */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="hidden md:grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6 max-w-4xl mx-auto"
          >
            <div className="border border-gray-200 rounded-lg bg-white/80 backdrop-blur-sm shadow-sm p-4 md:p-6">
              <div className="flex items-center justify-start mb-3">
                <TrendingUp className="h-5 w-5 mr-3 text-primary-blue" />
                <h3 className="font-semibold text-black text-sm md:text-base">T√≠nh nƒÉng n·ªïi b·∫≠t</h3>
              </div>
              <ul className="space-y-2 text-gray-600 text-xs md:text-sm">
                <li className="flex items-start">
                  <CheckCircle className="h-3 w-3 md:h-4 md:w-4 mr-2 mt-0.5 text-green-500 flex-shrink-0" />
                  T√≠nh to√°n ch√≠nh x√°c 100%
                </li>
                <li className="flex items-start">
                  <CheckCircle className="h-3 w-3 md:h-4 md:w-4 mr-2 mt-0.5 text-green-500 flex-shrink-0" />
                  Xu·∫•t b√°o c√°o PNG, Excel
                </li>
                <li className="flex items-start">
                  <CheckCircle className="h-3 w-3 md:h-4 md:w-4 mr-2 mt-0.5 text-green-500 flex-shrink-0" />
                  Chia s·∫ª b·∫£ng t√≠nh d·ªÖ d√†ng
                </li>
              </ul>
            </div>

            <div className="border border-gray-200 rounded-lg bg-white/80 backdrop-blur-sm shadow-sm p-4 md:p-6">
              <div className="flex items-center justify-start mb-3">
                <Shield className="h-5 w-5 mr-3 text-primary-blue" />
                <h3 className="font-semibold text-black text-sm md:text-base">B·∫£o m·∫≠t & Tin c·∫≠y</h3>
              </div>
              <ul className="space-y-2 text-gray-600 text-xs md:text-sm">
                <li className="flex items-start">
                  <CheckCircle className="h-3 w-3 md:h-4 md:w-4 mr-2 mt-0.5 text-green-500 flex-shrink-0" />
                  Kh√¥ng l∆∞u tr·ªØ th√¥ng tin c√° nh√¢n
                </li>
                <li className="flex items-start">
                  <CheckCircle className="h-3 w-3 md:h-4 md:w-4 mr-2 mt-0.5 text-green-500 flex-shrink-0" />
                  Mi·ªÖn ph√≠ ho√†n to√†n
                </li>
              </ul>
            </div>

            <div className="border border-gray-200 rounded-lg bg-white/80 backdrop-blur-sm shadow-sm p-4 md:p-6">
              <div className="flex items-center justify-start mb-3">
                <Settings className="h-5 w-5 mr-3 text-primary-blue" />
                <h3 className="font-semibold text-black text-sm md:text-base">C√° nh√¢n h√≥a</h3>
              </div>
              <ul className="space-y-2 text-gray-600 text-xs md:text-sm">
                <li className="flex items-start">
                  <CheckCircle className="h-3 w-3 md:h-4 md:w-4 mr-2 mt-0.5 text-green-500 flex-shrink-0" />
                  T√πy ch·ªânh th∆∞∆°ng hi·ªáu c√° nh√¢n
                </li>
              </ul>
            </div>
          </motion.div>
        </div>
      </BackgroundBeamsWithCollision>

      {/* Form Section */}
      <section id="loan-form" className="py-12 md:py-16 px-4 bg-white">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-left md:text-center mb-8 md:mb-12"
          >
            <div className="relative">
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-full h-px bg-gradient-to-r from-transparent via-primary-blue to-transparent"></div>
              </div>
              <div className="relative bg-white px-4 md:px-8">
                <div className="flex items-center justify-center mb-3 md:mb-4">
                  <div className="bg-primary-blue/10 p-2 md:p-3 rounded-full mr-3 md:mr-4">
                    <Target className="h-6 w-6 md:h-8 md:w-8 text-primary-blue" />
                  </div>
                  <h2 className="text-lg md:text-2xl lg:text-3xl font-bold text-black text-left md:text-center">
                    Nh·∫≠p Th√¥ng Tin ƒê·ªÉ T√≠nh L√£i Su·∫•t Vay Chi Ti·∫øt
                  </h2>
                </div>
              </div>
            </div>
            <p className="text-gray-600 max-w-2xl mx-auto mt-3 md:mt-4 text-sm md:text-base text-left md:text-center">
              ƒêi·ªÅn th√¥ng tin chi ti·∫øt ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t√≠nh to√°n ch√≠nh x√°c nh·∫•t
            </p>
          </motion.div>

          <motion.div
            className="max-w-7xl mx-auto bg-white p-4 md:p-8 rounded-2xl shadow-xl border border-gray-100 card-hover"
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            viewport={{ once: true }}
          >
            {/* H√†ng 1: 4 fields */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-8 mb-6 md:mb-8">
              {/* S·ªë ti·ªÅn vay */}
              <div className="space-y-2 md:space-y-3">
                <Label
                  htmlFor="loan-amount"
                  className="text-xs md:text-sm font-semibold text-primary-blue flex items-center"
                >
                  <div className="bg-primary-blue/10 p-1.5 md:p-2 rounded-lg mr-2 md:mr-3">
                    <DollarSign className="h-3 w-3 md:h-4 md:w-4 text-primary-blue" />
                  </div>
                  S·ªë ti·ªÅn vay
                </Label>
                <div className="relative">
                  <Input
                    id="loan-amount"
                    type="text"
                    placeholder="500.000.000"
                    value={loanAmount}
                    onChange={handleLoanAmountChange}
                    className="border-2 border-gray-200 focus:border-primary-blue transition-colors h-10 md:h-14 pr-12 md:pr-16 text-left text-sm md:text-lg font-medium rounded-xl placeholder:text-gray-400"
                  />
                  <span className="absolute right-2 md:right-4 top-1/2 transform -translate-y-1/2 text-primary-blue text-xs md:text-sm font-semibold bg-primary-blue/10 px-1.5 md:px-2 py-0.5 md:py-1 rounded">
                    VND
                  </span>
                </div>
              </div>

              {/* L√£i su·∫•t */}
              <div className="space-y-2 md:space-y-3">
                <Label
                  htmlFor="interest-rate"
                  className="text-xs md:text-sm font-semibold text-primary-blue flex items-center"
                >
                  <div className="bg-primary-blue/10 p-1.5 md:p-2 rounded-lg mr-2 md:mr-3">
                    <Percent className="h-3 w-3 md:h-4 md:w-4 text-primary-blue" />
                  </div>
                  L√£i su·∫•t
                </Label>
                <div className="relative">
                  <Input
                    id="interest-rate"
                    type="number"
                    step="0.1"
                    placeholder="10"
                    value={interestRate}
                    onChange={(e) => setInterestRate(e.target.value)}
                    className="border-2 border-gray-200 focus:border-primary-blue transition-colors h-10 md:h-14 pr-12 md:pr-16 text-left text-sm md:text-lg font-medium rounded-xl placeholder:text-gray-400"
                  />
                  <span className="absolute right-2 md:right-4 top-1/2 transform -translate-y-1/2 text-primary-blue text-xs md:text-sm font-semibold bg-primary-blue/10 px-1.5 md:px-2 py-0.5 md:py-1 rounded">
                    %
                  </span>
                </div>
              </div>

              {/* Th·ªùi h·∫°n vay */}
              <div className="space-y-2 md:space-y-3">
                <Label
                  htmlFor="loan-term"
                  className="text-xs md:text-sm font-semibold text-primary-blue flex items-center"
                >
                  <div className="bg-primary-blue/10 p-1.5 md:p-2 rounded-lg mr-2 md:mr-3">
                    <Calendar className="h-3 w-3 md:h-4 md:w-4 text-primary-blue" />
                  </div>
                  Th·ªùi h·∫°n vay
                </Label>
                <div className="relative">
                  <Input
                    id="loan-term"
                    type="number"
                    placeholder="24"
                    value={loanTerm}
                    onChange={(e) => setLoanTerm(e.target.value)}
                    className="border-2 border-gray-200 focus:border-primary-blue transition-colors h-10 md:h-14 pr-14 md:pr-20 text-left text-sm md:text-lg font-medium rounded-xl placeholder:text-gray-400"
                  />
                  <span className="absolute right-2 md:right-4 top-1/2 transform -translate-y-1/2 text-primary-blue text-xs md:text-sm font-semibold bg-primary-blue/10 px-1.5 md:px-2 py-0.5 md:py-1 rounded">
                    th√°ng
                  </span>
                </div>
              </div>

              {/* Lo·∫°i h√¨nh vay */}
              <div className="space-y-2 md:space-y-3">
                <Label className="text-xs md:text-sm font-semibold text-primary-blue flex items-center">
                  <div className="bg-primary-blue/10 p-1.5 md:p-2 rounded-lg mr-2 md:mr-3">
                    <Sparkles className="h-3 w-3 md:h-4 md:w-4 text-primary-blue" />
                  </div>
                  Lo·∫°i h√¨nh vay
                </Label>
                <Select value={loanType} onValueChange={setLoanType}>
                  <SelectTrigger className="border-2 border-gray-200 focus:border-primary-blue h-10 md:h-14 text-sm md:text-lg rounded-xl">
                    <SelectValue placeholder="Ch·ªçn lo·∫°i h√¨nh vay" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="equal-payment">Tr·∫£ tr√™n d∆∞ n·ª£ g·ªëc</SelectItem>
                    <SelectItem value="decreasing-balance">Tr·∫£ tr√™n d∆∞ n·ª£ gi·∫£m d·∫ßn</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* H√†ng 2: 3 fields */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-8">
              {/* Ng√¢n h√†ng */}
              <div className="space-y-2 md:space-y-3">
                <Label className="text-xs md:text-sm font-semibold text-primary-blue flex items-center">
                  <div className="bg-primary-blue/10 p-1.5 md:p-2 rounded-lg mr-2 md:mr-3">
                    <Building2 className="h-3 w-3 md:h-4 md:w-4 text-primary-blue" />
                  </div>
                  Ng√¢n h√†ng
                </Label>
                <Select value={bank} onValueChange={setBank} name="bank">
                  <SelectTrigger className="border-2 border-gray-200 focus:border-primary-blue transition-colors h-10 md:h-14 text-sm md:text-lg font-medium rounded-xl placeholder:text-gray-400">
                    <SelectValue placeholder="Ch·ªçn ng√¢n h√†ng" />
                  </SelectTrigger>
                  <SelectContent>
                    {Object.keys(bankLogoMap).map((bankKey) => {
                      const logoUrl = bankLogoMap[bankKey];
                      const isValidLogo = typeof logoUrl === 'string' && logoUrl.length > 0;
                      return (
                        <SelectItem key={bankKey} value={bankKey} className="flex items-center gap-2">
                          <div className="flex items-center gap-2">
                            {isValidLogo ? (
                              <img src={logoUrl} alt={bankNameMap[bankKey] || bankKey} width={20} height={20} style={{ borderRadius: 4, background: '#fff', border: '1px solid #eee' }} />
                            ) : (
                              <span className="w-5 h-5 flex items-center justify-center rounded-full bg-gray-200 text-xs font-bold text-gray-500">
                                {bankNameMap[bankKey]?.charAt(0) || bankKey.charAt(0)}
                              </span>
                            )}
                            <span>{bankNameMap[bankKey] || bankKey}</span>
                          </div>
                        </SelectItem>
                      );
                    })}
                  </SelectContent>
                </Select>
              </div>

              {/* T√™n Banker */}
              <div className="space-y-2 md:space-y-3">
                <Label
                  htmlFor="banker-name"
                  className="text-xs md:text-sm font-semibold text-primary-blue flex items-center"
                >
                  <div className="bg-primary-blue/10 p-1.5 md:p-2 rounded-lg mr-2 md:mr-3">
                    <User className="h-3 w-3 md:h-4 md:w-4 text-primary-blue" />
                  </div>
                  T√™n Banker
                </Label>
                <Input
                  id="banker-name"
                  placeholder="Banker xinh g√°i"
                  value={bankerName}
                  onChange={(e) => setBankerName(e.target.value)}
                  className="border-2 border-gray-200 focus:border-primary-blue transition-colors h-10 md:h-14 text-sm md:text-lg font-medium rounded-xl placeholder:text-gray-400"
                />
              </div>

              {/* Li√™n h·ªá */}
              <div className="space-y-2 md:space-y-3">
                <Label
                  htmlFor="contact-info"
                  className="text-xs md:text-sm font-semibold text-primary-blue flex items-center"
                >
                  <div className="bg-primary-blue/10 p-1.5 md:p-2 rounded-lg mr-2 md:mr-3">
                    <Phone className="h-3 w-3 md:h-4 md:w-4 text-primary-blue" />
                  </div>
                  Li√™n h·ªá
                </Label>
                <Input
                  id="contact-info"
                  placeholder="0123 456 789"
                  value={contactInfo}
                  onChange={(e) => setContactInfo(e.target.value)}
                  className="border-2 border-gray-200 focus:border-primary-blue transition-colors h-10 md:h-14 text-sm md:text-lg font-medium rounded-xl placeholder:text-gray-400"
                />
              </div>

              {/* √î tr·ªëng ƒë·ªÉ c√¢n b·∫±ng layout */}
              <div className="hidden lg:block"></div>
            </div>

            <div className="text-center mt-8 md:mt-12">
              <Button
                id="btn-form-calculate"
                onClick={() => {
                  window.dataLayer = window.dataLayer || [];
                  window.dataLayer.push({
                    event: 'button_click',
                    button_name: 'btn-form-calculate'
                  });
                  calculateLoan();
                }}
                size="lg"
                className="bg-primary-blue hover:bg-primary-blue-dark text-white px-8 md:px-12 py-3 md:py-4 text-base md:text-lg font-semibold rounded-xl shadow-lg transition-all duration-300 hover:shadow-xl"
              >
                <Calculator className="mr-2 h-4 w-4 md:h-5 md:w-5" />
                T√≠nh To√°n Ngay
              </Button>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Results Section */}
      <AnimatePresence>
        {showResults && calculation && (
          <motion.section
            id="results-section"
            className="py-12 md:py-16 px-4 bg-gray-50"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.6 }}
          >
            <div ref={resultRef} className="max-w-7xl mx-auto space-y-6 md:space-y-8">
              {/* Header - Mobile Responsive */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
                className="mb-6"
              >
                {/* Header Responsive: Mobile gi·ªØ nguy√™n, Desktop (lg) t·∫•t c·∫£ tr√™n 1 h√†ng */}
                <div className="w-full lg:flex lg:items-center lg:justify-between lg:space-x-6">
                  {/* C·ª•m logo + text: b√™n tr√°i, flex-1 tr√™n desktop */}
                  <div className="flex items-center lg:flex-1">
                    {/* Logo ng√¢n h√†ng */}
                    {bank && bankLogoMap[bank] && (
                      <div className="flex-shrink-0 flex items-center justify-center mr-3">
                        <Image src={bankLogoMap[bank]} alt={bank} width={40} height={40} className="w-10 h-10 md:w-12 md:h-12 object-contain border-2 border-gray-200 shadow-lg rounded-lg" />
                      </div>
                    )}
                    {/* Text */}
                    <div>
                      <h2 className="text-lg md:text-xl lg:text-2xl font-bold text-black text-left">
                        K·∫øt Qu·∫£ T√≠nh L√£i Vay Ng√¢n H√†ng
                      </h2>
                      <p className="text-xs md:text-sm lg:text-base text-gray-600 text-left">
                        Ng√¢n h√†ng: <span className="font-semibold text-primary-blue">{bankNameMap[bank] || bank}</span> | Banker:{" "}
                        <span className="font-semibold text-primary-blue">{bankerName}</span> | Li√™n h·ªá:{" "}
                        <span className="font-semibold text-primary-blue">{contactInfo}</span>
                      </p>
                    </div>
                  </div>
                  {/* C·ª•m n√∫t: ph·∫£i tr√™n desktop, d∆∞·ªõi tr√™n mobile */}
                  <div className="flex flex-wrap gap-2 w-auto justify-end mt-2 lg:mt-0">
                    <Button
                      id="btn-download-image"
                      onClick={() => {
                        window.dataLayer = window.dataLayer || [];
                        window.dataLayer.push({
                          event: 'button_click',
                          button_name: 'btn-download-image',
                          loan_amount: loanAmount,
                          interest_rate: interestRate,
                          loan_term: loanTerm,
                          loan_type: loanType,
                          bank: bank,
                          banker_name: bankerName,
                          contact_info: contactInfo
                        });
                        handleDownloadImage();
                      }}
                      size="sm"
                      variant="outline"
                      className="border-primary-blue text-primary-blue hover:bg-primary-blue hover:text-white text-xs px-2 md:px-3 h-8 md:h-9 min-w-16"
                    >
                      <ImageIcon className="mr-1 h-3 w-3" />
                      ·∫¢nh
                    </Button>
                    <Button
                      id="btn-download-excel"
                      onClick={() => {
                        window.dataLayer = window.dataLayer || [];
                        window.dataLayer.push({
                          event: 'button_click',
                          button_name: 'btn-download-excel',
                          loan_amount: loanAmount,
                          interest_rate: interestRate,
                          loan_term: loanTerm,
                          loan_type: loanType,
                          bank: bank,
                          banker_name: bankerName,
                          contact_info: contactInfo
                        });
                        handleExportSheets();
                      }}
                      size="sm"
                      variant="outline"
                      className="border-primary-blue text-primary-blue hover:bg-primary-blue hover:text-white text-xs px-2 md:px-3 h-8 md:h-9 min-w-16"
                    >
                      <FileSpreadsheet className="mr-1 h-3 w-3" />
                      Excel
                    </Button>
                    <Button
                      id="btn-copy-link"
                      onClick={() => {
                        window.dataLayer = window.dataLayer || [];
                        window.dataLayer.push({
                          event: 'button_click',
                          button_name: 'btn-copy-link',
                          loan_amount: loanAmount,
                          interest_rate: interestRate,
                          loan_term: loanTerm,
                          loan_type: loanType,
                          bank: bank,
                          banker_name: bankerName,
                          contact_info: contactInfo
                        });
                        handleCopyURL();
                      }}
                      size="sm"
                      variant="outline"
                      className="border-primary-blue text-primary-blue hover:bg-primary-blue hover:text-white text-xs px-2 md:px-3 h-8 md:h-9 min-w-16"
                    >
                      {copied ? <CheckIcon className="mr-1 h-3 w-3" /> : <LinkIcon className="mr-1 h-3 w-3" />}
                      {copied ? "ƒê√£ sao ch√©p" : "Link"}
                    </Button>
                  </div>
                </div>
              </motion.div>

              {/* Layout 2 b·∫£ng c√πng 1 d√≤ng */}
              <div ref={resultRef} className="grid grid-cols-1 lg:grid-cols-5 gap-4 md:gap-6">
                {/* T·ªïng Quan - 2/5 */}
                <motion.div
                  initial={{ opacity: 0, x: -30 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.6, delay: 0.2 }}
                  className="lg:col-span-2"
                >
                  <Card className="shadow-xl border-0 bg-white card-hover h-full">
                    <CardHeader className="bg-primary-blue text-white rounded-t-lg h-12 md:h-16 flex flex-row items-center justify-start px-4 md:px-6">
                      <CardTitle className="flex items-center text-sm md:text-lg font-semibold">
                        <Banknote className="mr-2 h-4 w-4 md:h-5 md:w-5" />
                        T·ªïng Quan Kho·∫£n Vay
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="p-4 md:p-6">
                      <div className="space-y-3 md:space-y-4">
                        <div className="flex justify-between items-center py-2 border-b border-gray-100">
                          <span className="text-gray-600 font-medium text-xs md:text-sm">S·ªë ti·ªÅn vay g·ªëc</span>
                          <span className="font-semibold text-gray-800 text-xs md:text-base">
                            {formatCurrency(Number.parseFloat(loanAmount.replace(/[^\d]/g, "")))}
                          </span>
                        </div>
                        <div className="flex justify-between items-center py-2 border-b border-gray-100">
                          <span className="text-gray-600 font-medium text-xs md:text-sm">T·ªïng ti·ªÅn l√£i</span>
                          <span className="font-semibold text-gray-800 text-xs md:text-base">
                            {formatCurrency(calculation.totalInterest)}
                          </span>
                        </div>
                        <div className="flex justify-between items-center py-2 border-b-2 border-primary-blue/20">
                          <span className="text-gray-700 font-semibold text-xs md:text-base">T·ªïng ti·ªÅn ph·∫£i tr·∫£</span>
                          <span className="font-bold text-gray-800 text-sm md:text-lg">
                            {formatCurrency(calculation.totalPayment)}
                          </span>
                        </div>
                        <div className="flex justify-between items-center py-3 bg-primary-blue/10 rounded-lg px-4">
                          <span className="text-gray-700 font-semibold text-xs md:text-sm">
                            {loanType === "equal-payment" ? "S·ªë ti·ªÅn tr·∫£ h√†ng th√°ng" : "S·ªë ti·ªÅn tr·∫£ th√°ng ƒë·∫ßu"}
                          </span>
                          <span className="font-bold text-primary-blue text-sm md:text-lg">
                            {formatCurrency(calculation.monthlyPayment)}
                          </span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>

                {/* B·∫£ng chi ti·∫øt - 3/5 */}
                <motion.div
                  initial={{ opacity: 0, x: 30 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.6, delay: 0.4 }}
                  className="lg:col-span-3"
                >
                  <div className="bg-white rounded-lg shadow-xl border-0 card-hover h-full">
                    <div className="bg-primary-blue text-white p-3 md:p-4 rounded-t-lg h-12 md:h-16 flex items-center justify-start px-4 md:px-6">
                      <h3 className="text-sm md:text-lg font-semibold flex items-center">
                        <Clock className="mr-2 h-4 w-4 md:h-5 md:w-5" />
                        L·ªãch Thanh To√°n Chi Ti·∫øt
                      </h3>
                    </div>
                    <div className="p-3 md:p-4">
                      <div className="overflow-x-auto">
                        <div className="h-[300px] md:h-[400px] overflow-y-auto scrollbar-thin scrollbar-thumb-primary scrollbar-track-gray-100">
                          <table className="w-full min-w-[600px] md:min-w-[700px]">
                            <thead className="sticky top-0 bg-white z-10">
                              <tr className="border-b-2 border-primary-blue">
                                <th className="text-center py-2 md:py-3 px-1 md:px-2 font-semibold text-primary-blue text-xs md:text-sm w-12 md:w-16">
                                  K·ª≥
                                </th>
                                <th className="text-right py-2 md:py-3 px-1 md:px-2 font-bold text-primary-blue text-xs md:text-sm w-24 md:w-32">
                                  D·ª± n·ª£ ƒë·∫ßu k·ª≥
                                </th>
                                <th className="text-right py-2 md:py-3 px-1 md:px-2 font-semibold text-primary-blue text-xs md:text-sm w-20 md:w-24">
                                  Tr·∫£ g·ªëc
                                </th>
                                <th className="text-right py-2 md:py-3 px-1 md:px-2 font-semibold text-primary-blue text-xs md:text-sm w-20 md:w-24">
                                  Tr·∫£ l√£i
                                </th>
                                <th className="text-right py-2 md:py-3 px-1 md:px-2 font-semibold text-primary-blue text-xs md:text-sm w-24 md:w-28">
                                  T·ªïng tr·∫£
                                </th>
                                <th className="text-right py-2 md:py-3 px-1 md:px-2 font-bold text-primary-blue text-xs md:text-sm w-24 md:w-32">
                                  D∆∞ n·ª£ c√≤n l·∫°i
                                </th>
                              </tr>
                            </thead>
                            <tbody>
                              {calculation.schedule.map((payment, index) => (
                                <motion.tr key={payment.month} className="border-b border-gray-100 hover:bg-blue-50">
                                  <td className="py-2 md:py-3 px-1 md:px-2 font-medium text-center text-xs md:text-sm">
                                    {payment.month}
                                  </td>
                                  <td className="py-2 md:py-3 px-1 md:px-2 text-right text-xs md:text-sm font-bold text-primary-blue">
                                    {formatCurrency(payment.startingBalance)}
                                  </td>
                                  <td className="py-2 md:py-3 px-1 md:px-2 text-right text-xs md:text-sm">
                                    {formatCurrency(payment.principal)}
                                  </td>
                                  <td className="py-2 md:py-3 px-1 md:px-2 text-right text-xs md:text-sm">
                                    {formatCurrency(payment.interest)}
                                  </td>
                                  <td className="py-2 md:py-3 px-1 md:px-2 text-right font-medium text-gray-800 text-xs md:text-sm">
                                    {formatCurrency(payment.monthlyPayment)}
                                  </td>
                                  <td className="py-2 md:py-3 px-1 md:px-2 text-right text-xs md:text-sm font-bold text-primary-blue">
                                    {formatCurrency(payment.balance)}
                                  </td>
                                </motion.tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                      <div className="mt-3 md:mt-4 text-center">
                        <p className="text-xs md:text-sm text-gray-500 italic">
                          (*) C√¥ng c·ª• t√≠nh l√£i su·∫•t vay c√≥ t√≠nh ch·∫•t tham kh·∫£o. Vui l√≤ng li√™n h·ªá ng√¢n h√†ng ƒë·ªÉ ƒë∆∞·ª£c t∆∞
                          v·∫•n c·ª• th·ªÉ.
                        </p>
                      </div>
                    </div>
                  </div>
                </motion.div>
              </div>
            </div>
          </motion.section>
        )}
      </AnimatePresence>

      {/* FAQ Section */}
      <section className="py-12 md:py-16 px-4 bg-gray-50">
        <div className="max-w-7xl mx-auto">
          <motion.div
            className="text-left md:text-center mb-8 md:mb-12"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <div className="relative">
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-full h-px bg-gradient-to-r from-transparent via-primary-blue to-transparent"></div>
              </div>
              <div className="relative bg-gray-50 px-4 md:px-8">
                <div className="flex items-center justify-center mb-3 md:mb-4">
                  <div className="bg-primary-blue/10 p-2 md:p-3 rounded-full mr-3 md:mr-4">
                    <HelpCircle className="h-6 w-6 md:h-8 md:w-8 text-primary-blue" />
                  </div>
                  <h2 className="text-lg md:text-2xl lg:text-3xl font-bold text-black text-left md:text-center">
                    C√¢u H·ªèi Th∆∞·ªùng G·∫∑p
                  </h2>
                </div>
              </div>
            </div>
            <p className="text-gray-600 max-w-3x2 mx-auto mt-3 md:mt-4 text-sm md:text-base text-left md:text-center">
              Gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc ph·ªï bi·∫øn v·ªÅ l√£i su·∫•t vay ng√¢n h√†ng v√† c√°ch s·ª≠ d·ª•ng c√¥ng c·ª• t√≠nh l√£i c·ªßa ch√∫ng t√¥i.
            </p>
          </motion.div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-8">
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
            >
              <Accordion type="single" collapsible className="space-y-3 md:space-y-4">
                <AccordionItem
                  value="item-1"
                  className="border border-gray-200 rounded-lg px-3 md:px-4 bg-white shadow-sm"
                >
                  <AccordionTrigger className="text-black font-semibold hover:no-underline text-left md:text-left text-sm md:text-base">
                    C√¥ng c·ª• t√≠nh l√£i ng√¢n h√†ng online n√†y c√≥ ch√≠nh x√°c kh√¥ng?
                  </AccordionTrigger>
                  <AccordionContent className="text-gray-600 text-left md:text-left text-xs md:text-sm">
                    C√¥ng c·ª• s·ª≠ d·ª•ng c√¥ng th·ª©c t√≠nh to√°n chu·∫©n c·ªßa ng√†nh ng√¢n h√†ng, k·∫øt qu·∫£ ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o.
                    L√£i su·∫•t v√† ƒëi·ªÅu ki·ªán th·ª±c t·∫ø c√≥ th·ªÉ kh√°c t√πy theo ch√≠nh s√°ch t·ª´ng ng√¢n h√†ng.
                  </AccordionContent>
                </AccordionItem>

                <AccordionItem
                  value="item-2"
                  className="border border-gray-200 rounded-lg px-3 md:px-4 bg-white shadow-sm"
                >
                  <AccordionTrigger className="text-black font-semibold hover:no-underline text-left md:text-left text-sm md:text-base">
                    N√™n ch·ªçn t√≠nh l√£i tr·∫£ tr√™n d∆∞ n·ª£ g·ªëc hay tr·∫£ tr√™n d∆∞ n·ª£ gi·∫£m d·∫ßn?
                  </AccordionTrigger>
                  <AccordionContent className="text-gray-600 text-left md:text-left text-xs md:text-sm">
                    Vi·ªác l·ª±a ch·ªçn gi·ªØa tr·∫£ tr√™n d∆∞ n·ª£ g·ªëc v√† tr·∫£ tr√™n d∆∞ n·ª£ gi·∫£m d·∫ßn ph·ª• thu·ªôc v√†o kh·∫£ nƒÉng t√†i ch√≠nh v√† k·∫ø ho·∫°ch tr·∫£ n·ª£
                    c·ªßa b·∫°n. Tr·∫£ tr√™n d∆∞ n·ª£ g·ªëc c√≥ s·ªë ti·ªÅn tr·∫£ h√†ng th√°ng ·ªïn ƒë·ªãnh, d·ªÖ d√†ng qu·∫£n l√Ω ng√¢n s√°ch. Tr·∫£ tr√™n d∆∞ n·ª£ gi·∫£m d·∫ßn gi√∫p
                    b·∫°n tr·∫£ √≠t l√£i h∆°n v·ªÅ l√¢u d√†i.
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              viewport={{ once: true }}
              className="lg:block hidden"
            >
              <Accordion type="single" collapsible className="space-y-3 md:space-y-4">
                <AccordionItem
                  value="item-3"
                  className="border border-gray-200 rounded-lg px-3 md:px-4 bg-white shadow-sm"
                >
                  <AccordionTrigger className="text-black font-semibold hover:no-underline text-left md:text-left text-sm md:text-base">
                    L√£i su·∫•t ∆∞u ƒë√£i v√† l√£i su·∫•t sau ∆∞u ƒë√£i kh√°c nhau nh∆∞ th·∫ø n√†o?
                  </AccordionTrigger>
                  <AccordionContent className="text-gray-600 text-left md:text-left text-xs md:text-sm">
                    L√£i su·∫•t ∆∞u ƒë√£i l√† m·ª©c l√£i su·∫•t th·∫•p h∆°n √°p d·ª•ng trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh (v√≠ d·ª•: 3-6
                    th√°ng ƒë·∫ßu). Sau th·ªùi gian ∆∞u ƒë√£i, l√£i su·∫•t s·∫Ω ƒëi·ªÅu ch·ªânh v·ªÅ m·ª©c th√¥ng th∆∞·ªùng, th∆∞·ªùng cao h∆°n l√£i
                    su·∫•t ∆∞u ƒë√£i.
                  </AccordionContent>
                </AccordionItem>

                <AccordionItem
                  value="item-4"
                  className="border border-gray-200 rounded-lg px-3 md:px-4 bg-white shadow-sm"
                >
                  <AccordionTrigger className="text-black font-semibold hover:no-underline text-left md:text-left text-sm md:text-base">
                    H·ªì s∆° vay v·ªën ng√¢n h√†ng c∆° b·∫£n c·∫ßn nh·ªØng g√¨?
                  </AccordionTrigger>
                  <AccordionContent className="text-gray-600 text-left md:text-left text-xs md:text-sm">
                    H·ªì s∆° vay v·ªën th∆∞·ªùng bao g·ªìm: CMND/CCCD, s·ªï h·ªô kh·∫©u, gi·∫•y t·ªù ch·ª©ng minh thu nh·∫≠p (sao k√™ l∆∞∆°ng, h·ª£p
                    ƒë·ªìng lao ƒë·ªông), gi·∫•y t·ªù li√™n quan ƒë·∫øn t√†i s·∫£n ƒë·∫£m b·∫£o (n·∫øu c√≥).
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </motion.div>

            {/* Mobile FAQ - Single Column */}
            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              viewport={{ once: true }}
              className="lg:hidden block"
            >
              <Accordion type="single" collapsible className="space-y-3 md:space-y-4">
                <AccordionItem
                  value="item-3"
                  className="border border-gray-200 rounded-lg px-3 md:px-4 bg-white shadow-sm"
                >
                  <AccordionTrigger className="text-black font-semibold hover:no-underline text-left md:text-left text-sm md:text-base">
                    L√£i su·∫•t ∆∞u ƒë√£i v√† l√£i su·∫•t sau ∆∞u ƒë√£i kh√°c nhau nh∆∞ th·∫ø n√†o?
                  </AccordionTrigger>
                  <AccordionContent className="text-gray-600 text-left md:text-left text-xs md:text-sm">
                    L√£i su·∫•t ∆∞u ƒë√£i l√† m·ª©c l√£i su·∫•t th·∫•p h∆°n √°p d·ª•ng trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh (v√≠ d·ª•: 3-6
                    th√°ng ƒë·∫ßu). Sau th·ªùi gian ∆∞u ƒë√£i, l√£i su·∫•t s·∫Ω ƒëi·ªÅu ch·ªânh v·ªÅ m·ª©c th√¥ng th∆∞·ªùng, th∆∞·ªùng cao h∆°n l√£i
                    su·∫•t ∆∞u ƒë√£i.
                  </AccordionContent>
                </AccordionItem>

                <AccordionItem
                  value="item-4"
                  className="border border-gray-200 rounded-lg px-3 md:px-4 bg-white shadow-sm"
                >
                  <AccordionTrigger className="text-black font-semibold hover:no-underline text-left md:text-left text-sm md:text-base">
                    H·ªì s∆° vay v·ªën ng√¢n h√†ng c∆° b·∫£n c·∫ßn nh·ªØng g√¨?
                  </AccordionTrigger>
                  <AccordionContent className="text-gray-600 text-left md:text-left text-xs md:text-sm">
                    H·ªì s∆° vay v·ªën th∆∞·ªùng bao g·ªìm: CMND/CCCD, s·ªï h·ªô kh·∫©u, gi·∫•y t·ªù ch·ª©ng minh thu nh·∫≠p (sao k√™ l∆∞∆°ng, h·ª£p
                    ƒë·ªìng lao ƒë·ªông), gi·∫•y t·ªù li√™n quan ƒë·∫øn t√†i s·∫£n ƒë·∫£m b·∫£o (n·∫øu c√≥).
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Content Section - ƒê·∫∑t sau FAQ */}
      <section className="py-12 md:py-16 px-4 bg-white">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden"
          >
            <div className="p-6 md:p-8">
              <h2 className="text-2xl md:text-3xl font-bold text-black mb-4 md:mb-6">
                L√£i Su·∫•t Vay Ng√¢n H√†ng L√† G√¨ v√† V√¨ Sao C·∫ßn T√≠nh To√°n Ch√≠nh X√°c?
              </h2>

              <p className="text-gray-700 mb-4 md:mb-6 leading-relaxed text-sm md:text-base">
                L√£i su·∫•t vay ng√¢n h√†ng l√† t·ª∑ l·ªá ph·∫ßn trƒÉm (%) tr√™n s·ªë ti·ªÅn g·ªëc m√† b·∫°n ph·∫£i tr·∫£ th√™m cho ng√¢n h√†ng khi
                vay v·ªën. Hi·ªÉu ƒë∆°n gi·∫£n, ƒë√¢y l√† chi ph√≠ b·∫°n ph·∫£i tr·∫£ ƒë·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ti·ªÅn c·ªßa ng√¢n h√†ng trong m·ªôt kho·∫£ng
                th·ªùi gian nh·∫•t ƒë·ªãnh. Vi·ªác s·ª≠ d·ª•ng m·ªôt <strong>c√¥ng c·ª• t√≠nh l√£i su·∫•t ng√¢n h√†ng online</strong> ch√≠nh x√°c
                s·∫Ω gi√∫p b·∫°n l·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh hi·ªáu qu·∫£, tr√°nh nh·ªØng b·∫•t ng·ªù kh√¥ng ƒë√°ng c√≥ v√† so s√°nh c√°c l·ª±a ch·ªçn
                vay v·ªën m·ªôt c√°ch minh b·∫°ch.
              </p>

              <h3 className="text-lg md:text-xl font-semibold text-gray-800 mb-3 md:mb-4">
                C√°c Lo·∫°i L√£i Su·∫•t Vay Ph·ªï Bi·∫øn
              </h3>
              <ul className="space-y-2 md:space-y-3 mb-6 md:mb-8 text-gray-700 text-sm md:text-base">
                <li className="flex items-start">
                  <CheckCircle className="h-4 w-4 md:h-5 md:w-5 mr-2 md:mr-3 mt-0.5 text-green-500 flex-shrink-0" />
                  <span>
                    <strong>L√£i su·∫•t c·ªë ƒë·ªãnh:</strong> L√† lo·∫°i l√£i su·∫•t kh√¥ng thay ƒë·ªïi trong su·ªët th·ªùi gian vay. ∆Øu ƒëi·ªÉm
                    l√† gi√∫p b·∫°n d·ªÖ d√†ng d·ª± tr√π chi ph√≠ tr·∫£ n·ª£ h√†ng th√°ng.
                  </span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="h-4 w-4 md:h-5 md:w-5 mr-2 md:mr-3 mt-0.5 text-green-500 flex-shrink-0" />
                  <span>
                    <strong>L√£i su·∫•t th·∫£ n·ªïi:</strong> L√£i su·∫•t s·∫Ω thay ƒë·ªïi theo t·ª´ng k·ª≥ ƒëi·ªÅu ch·ªânh (v√≠ d·ª•: 3 th√°ng, 6
                    th√°ng, 12 th√°ng) d·ª±a tr√™n bi·∫øn ƒë·ªông c·ªßa th·ªã tr∆∞·ªùng. L√£i su·∫•t n√†y c√≥ th·ªÉ th·∫•p h∆°n l√∫c ƒë·∫ßu nh∆∞ng ti·ªÅm
                    ·∫©n r·ªßi ro tƒÉng l√™n sau n√†y.
                  </span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="h-4 w-4 md:h-5 md:w-5 mr-2 md:mr-3 mt-0.5 text-green-500 flex-shrink-0" />
                  <span>
                    <strong>L√£i su·∫•t h·ªón h·ª£p:</strong> L√† s·ª± k·∫øt h·ª£p c·ªßa hai lo·∫°i tr√™n, th∆∞·ªùng l√† c·ªë ƒë·ªãnh trong m·ªôt th·ªùi
                    gian ƒë·∫ßu (g·ªçi l√† th·ªùi gian ∆∞u ƒë√£i) v√† sau ƒë√≥ chuy·ªÉn sang th·∫£ n·ªïi.
                  </span>
                </li>
              </ul>

              <h2 className="text-2xl md:text-3xl font-bold text-black mb-4 md:mb-6">
                H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng C√¥ng C·ª• T√≠nh L√£i Vay C·ªßa Ch√∫ng T√¥i
              </h2>
              <p className="text-gray-700 mb-3 md:mb-4 text-sm md:text-base">
                ƒê·ªÉ c√≥ c√°i nh√¨n t·ªïng quan v·ªÅ kho·∫£n vay t∆∞∆°ng lai, b·∫°n ch·ªâ c·∫ßn th·ª±c hi·ªán c√°c b∆∞·ªõc ƒë∆°n gi·∫£n sau:
              </p>

              <ol className="space-y-2 md:space-y-3 mb-6 md:mb-8 text-gray-700 text-sm md:text-base">
                <li className="flex items-start">
                  <span className="bg-primary-blue text-white rounded-full w-5 h-5 md:w-6 md:h-6 flex items-center justify-center text-xs md:text-sm font-bold mr-2 md:mr-3 mt-0.5 flex-shrink-0">
                    1
                  </span>
                  <span>
                    <strong>B∆∞·ªõc 1: Nh·∫≠p t·ªïng s·ªë ti·ªÅn c·∫ßn vay:</strong> ƒêi·ªÅn ch√≠nh x√°c s·ªë v·ªën b·∫°n d·ª± ƒë·ªãnh vay t·ª´ ng√¢n
                    h√†ng.
                  </span>
                </li>
                <li className="flex items-start">
                  <span className="bg-primary-blue text-white rounded-full w-5 h-5 md:w-6 md:h-6 flex items-center justify-center text-xs md:text-sm font-bold mr-2 md:mr-3 mt-0.5 flex-shrink-0">
                    2
                  </span>
                  <span>
                    <strong>B∆∞·ªõc 2: Nh·∫≠p th·ªùi h·∫°n vay:</strong> Th·ªùi gian b·∫°n mu·ªën tr·∫£ h·∫øt kho·∫£n vay, t√≠nh b·∫±ng th√°ng
                    ho·∫∑c nƒÉm.
                  </span>
                </li>
                <li className="flex items-start">
                  <span className="bg-primary-blue text-white rounded-full w-5 h-5 md:w-6 md:h-6 flex items-center justify-center text-xs md:text-sm font-bold mr-2 md:mr-3 mt-0.5 flex-shrink-0">
                    3
                  </span>
                  <span>
                    <strong>B∆∞·ªõc 3: Nh·∫≠p l√£i su·∫•t (%/nƒÉm):</strong> ƒêi·ªÅn m·ª©c l√£i su·∫•t d·ª± ki·∫øn m√† ng√¢n h√†ng cung c·∫•p.
                  </span>
                </li>
                <li className="flex items-start">
                  <span className="bg-primary-blue text-white rounded-full w-5 h-5 md:w-6 md:h-6 flex items-center justify-center text-xs md:text-sm font-bold mr-2 md:mr-3 mt-0.5 flex-shrink-0">
                    4
                  </span>
                  <span>
                    <strong>B∆∞·ªõc 4: Ch·ªçn ph∆∞∆°ng ph√°p t√≠nh l√£i:</strong> L·ª±a ch·ªçn gi·ªØa 'Tr·∫£ tr√™n d∆∞ n·ª£ g·ªëc' ho·∫∑c 'Tr·∫£
                    tr√™n d∆∞ n·ª£ gi·∫£m d·∫ßn'.
                  </span>
                </li>
                <li className="flex items-start">
                  <span className="bg-primary-blue text-white rounded-full w-5 h-5 md:w-6 md:h-6 flex items-center justify-center text-xs md:text-sm font-bold mr-2 md:mr-3 mt-0.5 flex-shrink-0">
                    5
                  </span>
                  <span>
                    <strong>B∆∞·ªõc 5: Nh·∫•n n√∫t "T√≠nh l√£i vay":</strong> H·ªá th·ªëng s·∫Ω ngay l·∫≠p t·ª©c tr·∫£ v·ªÅ b·∫£ng chi ti·∫øt s·ªë
                    ti·ªÅn g·ªëc v√† l√£i ph·∫£i tr·∫£ h√†ng th√°ng, c√πng t·ªïng s·ªë ti·ªÅn ph·∫£i thanh to√°n.
                  </span>
                </li>
              </ol>

              {showFullContent && (
                <div className="space-y-4 md:space-y-6">
                  <h2 className="text-2xl md:text-3xl font-bold text-black mb-4 md:mb-6">
                    {month && year
                      ? `B·∫£ng L√£i Su·∫•t Vay Ng√¢n H√†ng C·∫≠p Nh·∫≠t Th√°ng ${month}/${year} (Tham kh·∫£o)`
                      : 'B·∫£ng L√£i Su·∫•t Vay Ng√¢n H√†ng (Tham kh·∫£o)'}
                  </h2>
                  <p className="text-gray-700 mb-4 md:mb-6 text-sm md:text-base">
                    D∆∞·ªõi ƒë√¢y l√† b·∫£ng t·ªïng h·ª£p l√£i su·∫•t cho vay mua nh√† t·∫°i m·ªôt s·ªë ng√¢n h√†ng l·ªõn t·∫°i Vi·ªát Nam ƒë·ªÉ b·∫°n tham
                    kh·∫£o. L∆∞u √Ω r·∫±ng c√°c <strong>l√£i su·∫•t ng√¢n h√†ng online</strong> n√†y c√≥ th·ªÉ thay ƒë·ªïi.
                  </p>

                  <div className="overflow-x-auto mb-6 md:mb-8">
                    <table className="w-full border-collapse border border-gray-300 rounded-lg text-xs md:text-sm">
                      <thead className="bg-primary-blue/10">
                        <tr>
                          <th className="border border-gray-300 px-2 md:px-4 py-2 md:py-3 text-left font-semibold text-primary-blue">
                            Ng√¢n h√†ng
                          </th>
                          <th className="border border-gray-300 px-2 md:px-4 py-2 md:py-3 text-center font-semibold text-primary-blue">
                            L√£i su·∫•t ∆∞u ƒë√£i (%/nƒÉm)
                          </th>
                          <th className="border border-gray-300 px-2 md:px-4 py-2 md:py-3 text-center font-semibold text-primary-blue">
                            T·ª∑ l·ªá cho vay t·ªëi ƒëa (%)
                          </th>
                          <th className="border border-gray-300 px-2 md:px-4 py-2 md:py-3 text-center font-semibold text-primary-blue">
                            K·ª≥ h·∫°n vay t·ªëi ƒëa (nƒÉm)
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {Object.entries(bankLinks).map(([name, url]) => (
                          <tr className="hover:bg-gray-50" key={name}>
                            <td className="border border-gray-300 px-2 md:px-4 py-2 md:py-3">
                              <a href={url} target="_blank" rel="noopener" className="text-primary-blue underline hover:text-blue-700 font-semibold">{name}</a>
                            </td>
                            <td className="border border-gray-300 px-2 md:px-4 py-2 md:py-3 text-center">{bankRates[name]?.rate ?? "-"}</td>
                            <td className="border border-gray-300 px-2 md:px-4 py-2 md:py-3 text-center">{bankRates[name]?.max ?? "-"}</td>
                            <td className="border border-gray-300 px-2 md:px-4 py-2 md:py-3 text-center">{bankRates[name]?.term ?? "-"}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>

                  <p className="text-gray-700 mb-6 md:mb-8 text-sm md:text-base">
                    <strong>L∆∞u √Ω quan tr·ªçng:</strong> B·∫£ng l√£i su·∫•t tr√™n ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o t·∫°i th·ªùi ƒëi·ªÉm
                    th√°ng 6/2025 v√† c√≥ th·ªÉ thay ƒë·ªïi. L√£i su·∫•t th·ª±c t·∫ø s·∫Ω ph·ª• thu·ªôc v√†o ch√≠nh s√°ch c·ªßa t·ª´ng ng√¢n h√†ng v√†
                    h·ªì s∆° c·ª• th·ªÉ c·ªßa kh√°ch h√†ng. H√£y li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ng√¢n h√†ng ƒë·ªÉ c√≥ th√¥ng tin ch√≠nh x√°c nh·∫•t.
                  </p>
                </div>
              )}

              <div className="mt-6 md:mt-8 text-center">
                <Button
                  onClick={() => setShowFullContent(!showFullContent)}
                  variant="outline"
                  className="border-primary-blue text-primary-blue hover:bg-primary-blue hover:text-white transition-colors text-sm md:text-base"
                >
                  {showFullContent ? "Thu g·ªçn" : "Xem th√™m n·ªôi dung"}
                </Button>
              </div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* DOM ·∫©n ƒë·ªÉ export ·∫£nh/PDF */}
      <div style={{ opacity: 0, pointerEvents: 'none', position: "absolute", left: 0, top: 0, width: '100vw', height: 'auto', zIndex: -1 }}>
        <ExportableResult
          ref={hiddenResultRef}
          calculation={calculation}
          loanAmount={loanAmount}
          interestRate={interestRate}
          loanTerm={loanTerm}
          loanType={loanType}
          bank={bank}
          bankerName={bankerName}
          contactInfo={contactInfo}
        />
      </div>

      {/* Footer */}
      <div className="w-full text-center text-gray-500 text-xs md:text-sm py-8">
        <div>¬© 2025 BankerTool. T·∫•t c·∫£ b·∫£n quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</div>
        <div>ƒê·ªëi v·ªõi quan h·ªá ƒë·ªëi t√°c qu·∫£ng c√°o ho·∫∑c ƒë√≥ng g√≥p, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email: <a href="mailto:support@bankertool.online" className="underline hover:text-primary-blue">support@bankertool.online</a></div>
      </div>
    </div>
  )
}
